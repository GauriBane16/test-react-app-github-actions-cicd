# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - name: npm install build and test  
      run: |
          npm i
          npm run build --if-present
          npm test
      env : 
        CI : true  
  fetch :
     runs-on: ubuntu-latest
     needs : build
     steps:
      - uses: actions/checkout@v2
      - name: fetch data using curl
        run: |
          curl "https://doorstep-node-api.herokuapp.com/api/v1.0/vendor/vendorDetails" -o data.json
      - name: Create env file
        run: |
          touch .env
          echo "Hi" >>.env
          cat .env
          
      # Optionally, use `jq` to pull one or more fields from the JSON to include in the SMS message
      - name: Parse data
        id: parse_data
        run: |
          echo '::set-output name=result::'$(jq -r '.result.appName' data.json)
          echo '::set-output name=outputResult::'$(jq -r '.result' data.json)
      - name: Deploy on Heroku
        if: steps.cache.outputs.cache-hit != 'true'
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "${{ steps.parse_data.outputs.result }}-doorstep"
          heroku_email: "sunitagauri16@gmail.com"   
      - name: fetch the json value
        run: |
         githubjson=`cat ${{ steps.parse_data.outputs.outputResult }}`
         echo $githubjson.appName
         touch .env
         number=`echo $(jq -r '.appName' <<< "${{ steps.parse_data.outputs.outputResult }}")` >>.env
         PRTitle=`echo $(jq -r '.prefix' <<< "${{ steps.parse_data.outputs.outputResult }}")` >>.env
         PRUrl=`echo $(jq -r '.emalAddress' <<< "${{ steps.parse_data.outputs.outputResult }}")` >>.env
         cat .env
          
      # Compare the response to the previous run, using a hash of the response as the cache key
      - name: Fetch Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: data.json
          key: ${{ hashFiles('data.json') }}  
      - name: Send mail
        if: always()
        uses: dawidd6/action-send-mail@v2
        with:
          # mail server settings
          server_address: smtp.gmail.com
          server_port: 465
          # user credentials
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          # email subject
          subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}
          # email body as text
          body: "There's been a change! someField is now ${{ steps.parse_data.outputs.outputResult }}.appName."
          # comma-separated string, send email to
          to: sunitagamne16@gmail.com
          # from email name
          from: Gauri Bane    
      
